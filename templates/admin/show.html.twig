{% extends 'base.html.twig' %}

{% block title %}{{ poll.title }} - OpenStreamPoll{% endblock %}

{% block body %}
    <div class="min-h-screen">
        <div class="container mx-auto px-2 py-2">
            <div class="card bg-base-200 shadow-xl">
                <div class="card-body p-4">
                    {# En-tête optimisé #}
                    <div class="flex flex-col sm:flex-row justify-between items-start gap-2 mb-4">
                        <h1 class="card-title text-lg">{{ poll.title }}</h1>
                        
                        <div class="flex flex-wrap gap-2 items-center w-full sm:w-auto justify-end">
                            <div class="tooltip" data-tip="Click to copy">
                                <button class="btn btn-ghost btn-sm gap-2"
                                    onclick="navigator.clipboard.writeText('{{ url('app_poll_show', {'shortCode': poll.shortCode}) }}');
                                            const icon = this.querySelector('.copy-icon');
                                            const checkIcon = this.querySelector('.check-icon');
                                            icon.classList.add('hidden');
                                            checkIcon.classList.remove('hidden');
                                            setTimeout(() => {
                                                icon.classList.remove('hidden');
                                                checkIcon.classList.add('hidden');
                                            }, 1000);">
                                    <span class="font-mono text-sm">{{ poll.shortCode }}</span>
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 copy-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                                    </svg>
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 check-icon hidden text-success" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                    </svg>
                                </button>
                            </div>

                            <div class="join">
                                <a href="{{ path('app_admin_index') }}" class="btn btn-ghost btn-sm join-item">Back</a>
                                {% if poll.totalVotes == 0 %}
                                    <a href="{{ path('app_admin_edit', {'id': poll.id}) }}" class="btn btn-primary btn-sm join-item">Edit</a>
                                {% endif %}
                                <form method="post" action="{{ path('app_admin_delete', {'id': poll.id}) }}" 
                                      onsubmit="return confirm('Delete this poll?');" 
                                      style="display: contents">
                                    <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ poll.id) }}">
                                    <button class="btn btn-error btn-sm join-item">Delete</button>
                                </form>
                            </div>
                        </div>
                    </div>

                    {# Information Card #}
                    <div class="card bg-base-300">
                        <div class="card-body p-3">
                            <div class="flex gap-4 flex-wrap">
                                <div>
                                    <span class="text-sm opacity-75">Status</span>
                                    <div class="mt-1">
                                        {% if "now"|date('U') >= poll.startAt|date('U') and "now"|date('U') <= poll.endAt|date('U') %}
                                            <div class="badge badge-success badge-sm">Open</div>
                                        {% else %}
                                            <div class="badge badge-error badge-sm">Closed</div>
                                        {% endif %}
                                    </div>
                                </div>
                                <div>
                                    <span class="text-sm opacity-75">Time Left</span>
                                    <div class="mt-1" x-data="remainingTime('{{ poll.endAt|date('Y-m-d\\TH:i:s\\Z') }}')" >
                                        <span x-text="timeText" x-show="!isExpired" class="badge badge-primary badge-sm"></span>
                                        <span x-show="isExpired" class="text-xs opacity-50">Finished</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    {# Results Card #}
                    <div class="card bg-base-300 mt-3">
                        <div class="card-body p-3">
                            <h2 class="text-sm font-bold mb-2">Results</h2>
                            <div id="poll-results"
                                 hx-get="{{ path('app_admin_results', {'id': poll.id}) }}"
                                 hx-trigger="every 3s">
                                <div class="flex flex-col gap-2">
                                    {% for i in 1..5 %}
                                        <div class="skeleton h-6 w-full"></div>
                                    {% endfor %}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('remainingTime', (endDate) => ({
            timeText: '',
            isExpired: false,
            
            init() {
                this.updateTimer()
                setInterval(() => this.updateTimer(), 1000)
            },

            updateTimer() {
                const end = new Date(endDate)
                const now = new Date()
                const diff = end - now

                if (diff <= 0) {
                    this.isExpired = true
                    return
                }

                const totalSeconds = Math.floor(diff / 1000)
                const minutes = Math.floor(totalSeconds / 60)
                const seconds = totalSeconds % 60

                this.timeText = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`
            }
        }))
    })
    </script>
{% endblock %}
